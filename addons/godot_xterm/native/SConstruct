#!/usr/bin/env python

# SPDX-FileCopyrightText: 2020-2025 Leroy Hopson <godot-xterm@leroy.nix.nz>
# SPDX-License-Identifier: MIT

import os

env = SConscript("thirdparty/godot-cpp/SConstruct")
env['ENV'] = os.environ

VariantDir('build', 'src', duplicate=0)
env['OBJPREFIX'] = os.path.join('build', '')

env.Append(CPPPATH=[
    "thirdparty/libtsm/src/tsm",
    "thirdparty/libtsm/external",
    "thirdparty/libtsm/external/wcwidth",
    "thirdparty/libtsm/src/shared",
    'thirdparty/libuv/src',
    'thirdparty/libuv/include',
])

sources = Glob("src/*.cpp") + Glob("thirdparty/libtsm/src/tsm/*.c")
sources.append([
    'thirdparty/libtsm/external/wcwidth/wcwidth.c',
    'thirdparty/libtsm/src/shared/shl-htable.c',
])

# Include GDExtension documentation if building for editor or debug template.
if env["target"] in ["editor", "template_debug"]:
    try:
        doc_data = env.GodotCPPDocData("src/gen/doc_data.gen.cpp", source=Glob("doc_classes/*.xml"))
        sources.append(doc_data)
    except AttributeError:
        print("Not including class reference as we're targeting a pre-4.3 baseline.")

# Allow overriding libuv build directory to support side-by-side platform builds.
uv_build_dir = os.environ.get('LIBUV_BUILD_DIR', 'build')

if env['platform'] == 'linux' or env['platform'] == 'macos':
    env.Append(LIBS=['util', env.File('thirdparty/libuv/' + uv_build_dir + '/libuv.a')])
    if env['platform'] == 'linux':
        env.Append(LIBS=['pthread'])
        env.Append(LINKFLAGS=['-static-libstdc++', '-static-libgcc'])
elif env['platform'] == 'windows':
	# godot-cpp always builds with the non-debug version of the CRT. So we use /MT for both debug and release builds. 
	env.Append(CCFLAGS=["-MT"])
	env.Append(LIBS=['ws2_32.lib', 'Advapi32', 'User32', 'Userenv', 'iphlpapi', 'dbghelp', 'ole32', 'shell32'])
	if env["target"] == "template_release":
		env.Append(LIBS=[env.File('thirdparty/libuv/' + uv_build_dir + '/Release/libuv.lib')])
	else:
		env.Append(LIBS=[env.File('thirdparty/libuv/' + uv_build_dir + '/Debug/libuv.lib')])
else:
	env.Append(CPPDEFINES=['_PTY_DISABLED'])

if env["platform"] == "macos":
    library = env.SharedLibrary(
        "../lib/libgodot-xterm.{}.{}.framework/libgodot-xterm.{}.{}".format(
            env["platform"], env["target"], env["platform"], env["target"]
        ),
        source=sources,
    )
    spawn_helper = env.Program(
        "../lib/spawn-helper",
        source="thirdparty/node-pty/src/unix/spawn-helper.cc"
    )
    Default(spawn_helper)
else:
    library = env.SharedLibrary(
        "../lib/libgodot-xterm{}{}".format(env["suffix"], env["SHLIBSUFFIX"]),
        source=sources,
    )

Default(library)
